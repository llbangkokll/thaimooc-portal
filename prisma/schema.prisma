generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model admin_users {
  id        String    @id @default(cuid())
  username  String    @unique
  password  String
  name      String
  email     String    @unique
  role      String    @default("admin")
  isActive  Boolean   @default(true)
  lastLogin DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model banners {
  id              String   @id @default(cuid())
  title           String
  titleEn         String
  subtitle        String?
  subtitleEn      String?
  imageId         String
  linkUrl         String?  @db.Text
  isActive        Boolean  @default(true)
  order           Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  overlayImageId  String?  @db.Text
  templateId      String?
  accentColor     String?
  backgroundColor String?  @db.Text
  buttonText      String?
  buttonTextEn    String?
  description     String?  @db.Text
  descriptionEn   String?  @db.Text
  textColor       String?
}

model categories {
  id                String              @id @default(cuid())
  name              String
  nameEn            String
  icon              String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  course_categories course_categories[]
}

model course_categories {
  courseId   String
  categoryId String
  categories categories @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  courses    courses    @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@id([courseId, categoryId])
  @@index([categoryId])
  @@index([courseId])
}

model course_course_types {
  courseId     String
  courseTypeId String
  courses      courses      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  course_types course_types @relation(fields: [courseTypeId], references: [id], onDelete: Cascade)

  @@id([courseId, courseTypeId])
  @@index([courseId])
  @@index([courseTypeId])
}

model course_instructors {
  courseId     String
  instructorId String
  courses      courses     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  instructors  instructors @relation(fields: [instructorId], references: [id], onDelete: Cascade)

  @@id([courseId, instructorId])
  @@index([courseId])
  @@index([instructorId])
}

model course_types {
  id                  String                @id @default(cuid())
  name                String
  nameEn              String
  description         String?               @db.Text
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  icon                String?
  course_course_types course_course_types[]
}

model courses {
  id                  String                @id @default(cuid())
  title               String
  titleEn             String
  description         String                @db.Text
  institutionId       String?
  instructorId        String?
  imageId             String?
  level               String?
  durationHours       Int?
  hasCertificate      Boolean               @default(false)
  enrollCount         Int                   @default(0)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  bannerImageId       String?
  learningOutcomes    String?               @db.Text
  teachingLanguage    String?
  prerequisites       String?               @db.Text
  targetAudience      String?               @db.Text
  tags                String?               @db.Text
  courseUrl           String?               @db.Text
  videoUrl            String?               @db.Text
  contentStructure    String?               @db.Text
  assessmentCriteria  String?               @db.Text
  course_categories   course_categories[]
  course_course_types course_course_types[]
  course_instructors  course_instructors[]
  institutions        institutions?         @relation(fields: [institutionId], references: [id])
  instructors         instructors?          @relation(fields: [instructorId], references: [id])

  @@index([institutionId])
  @@index([instructorId])
}

model image_placeholders {
  id       String @id @default(cuid())
  url      String @db.Text
  title    String
  category String
}

model institutions {
  id           String        @id @default(cuid())
  name         String
  nameEn       String
  abbreviation String
  logoUrl      String        @db.Text
  website      String?       @db.Text
  description  String?       @db.Text
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  courses      courses[]
  instructors  instructors[]
}

model instructors {
  id                 String               @id @default(cuid())
  name               String
  nameEn             String
  title              String
  institutionId      String
  bio                String?              @db.Text
  imageUrl           String?              @db.Text
  email              String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  course_instructors course_instructors[]
  courses            courses[]
  institutions       institutions         @relation(fields: [institutionId], references: [id])

  @@index([institutionId])
}

model news {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.LongText
  imageId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model webapp_settings {
  id           String   @id @default(cuid())
  siteName     String
  siteLogo     String   @db.Text
  contactEmail String
  contactPhone String
  address      String   @db.Text
  facebookUrl  String?  @db.Text
  twitterUrl   String?  @db.Text
  youtubeUrl   String?  @db.Text
  instagramUrl String?  @db.Text
  lineUrl      String?  @db.Text
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  aboutUs      String?  @db.Text
  aboutUsEn    String?  @db.Text
  mapUrl       String?  @db.Text
}
